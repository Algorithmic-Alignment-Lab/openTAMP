Index: opentamp/policy_hooks/namo/hyperparams_v94.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>NUM_OBJS = 1\nNUM_TARGS = 1\n\nfrom datetime import datetime\nimport os\nimport os.path\n\nimport numpy as np\n\nimport opentamp.policy_hooks.utils.policy_solver_utils as utils\nfrom opentamp.core.util_classes.namo_grip_predicates import ATTRMAP\nfrom opentamp.pma.namo_grip_solver import NAMOSolver\nfrom opentamp.policy_hooks.namo.grip_agent import NAMOGripAgent\nimport opentamp.policy_hooks.namo.sorting_prob_11 as prob\nfrom opentamp.policy_hooks.utils.file_utils import LOG_DIR\n\nBASE_DIR = os.getcwd() + '/policy_hooks/'\nEXP_DIR = BASE_DIR + 'experiments/'\n\nprob.NUM_OBJS = NUM_OBJS\nprob.NUM_TARGS = NUM_TARGS\n\nNUM_CONDS = 1 # Per rollout server\nNUM_PRETRAIN_STEPS = 20\nNUM_PRETRAIN_TRAJ_OPT_STEPS = 1\nNUM_TRAJ_OPT_STEPS = 1\nN_SAMPLES = 10\nN_TRAJ_CENTERS = 1\nHL_TIMEOUT = 600\nOPT_WT_MULT = 5e2\nN_ROLLOUT_SERVERS = 34 # 58\nN_ALG_SERVERS = 0\nN_OPTIMIZERS = 0\nN_DIRS = 16\nN_GRASPS = 4\nTIME_LIMIT = 14400\n\ndef refresh_config(no=NUM_OBJS, nt=NUM_TARGS):\n    cost_wp_mult = np.ones((3 + 2 * NUM_OBJS))\n    prob.NUM_OBJS = no\n    prob.NUM_TARGS = nt\n    prob.N_GRASPS = N_GRASPS\n    prob.FIX_TARGETS = True\n\n    prob.domain_file = \"../domains/namo_domain/namo_current_holgrip.domain\"\n    prob.END_TARGETS = prob.END_TARGETS[:8]\n    prob.n_aux = 0\n    config = {\n        'num_conds': NUM_CONDS,\n        'solver_type': 'adam', #'rmsprop',\n        'base_weight_dir': 'namo_',\n        'max_sample_queue': 5e2,\n        'max_opt_sample_queue': 10,\n        'task_map_file': prob.mapping_file,\n        'prob': prob,\n        'get_vector': prob.get_vector,\n        'robot_name': 'pr2',\n        'obj_type': 'can',\n        'num_objs': no,\n        'num_targs': nt,\n        'attr_map': ATTRMAP,\n        'agent_type': NAMOGripAgent,\n        'mp_solver_type': NAMOSolver,\n        'll_solver_type': NAMOSolver,\n        'n_dirs': N_DIRS,\n\n        'state_include': [utils.STATE_ENUM],\n\n        'obs_include': [#utils.LIDAR_ENUM,\n                        utils.MJC_SENSOR_ENUM,\n                        utils.TASK_ENUM,\n                        utils.END_POSE_ENUM,\n                        #utils.EE_ENUM,\n                        #utils.VEL_ENUM,\n                        utils.THETA_VEC_ENUM,\n                        ],\n\n        'prim_obs_include': [\n                             utils.THETA_VEC_ENUM,\n                             #utils.VEL_ENUM,\n                             utils.ONEHOT_GOAL_ENUM,\n                             ],\n\n        'prim_out_include': list(prob.get_prim_choices().keys()),\n\n        'sensor_dims': {\n                utils.OBJ_POSE_ENUM: 2,\n                utils.TARG_POSE_ENUM: 2,\n                utils.LIDAR_ENUM: N_DIRS,\n                utils.MJC_SENSOR_ENUM: 69,\n                utils.EE_ENUM: 2,\n                utils.END_POSE_ENUM: 2,\n                utils.GRIPPER_ENUM: 1,\n                utils.VEL_ENUM: 2,\n                utils.THETA_ENUM: 1,\n                utils.THETA_VEC_ENUM: 2,\n                utils.GRASP_ENUM: N_GRASPS,\n                utils.GOAL_ENUM: 2*no,\n                utils.ONEHOT_GOAL_ENUM: no*(prob.n_aux + len(prob.END_TARGETS)),\n                utils.INGRASP_ENUM: no,\n                utils.TRUETASK_ENUM: 2,\n                utils.TRUEOBJ_ENUM: no,\n                utils.TRUETARG_ENUM: len(prob.END_TARGETS),\n                utils.ATGOAL_ENUM: no,\n                utils.FACTOREDTASK_ENUM: len(list(prob.get_prim_choices().keys())),\n                # utils.INIT_OBJ_POSE_ENUM: 2,\n            },\n            \n        'visual': False,\n        'time_limit': TIME_LIMIT,\n        'success_to_replace': 1,\n        'steps_to_replace': no * 50,\n        'curric_thresh': -1,\n        'n_thresh': -1,\n        'expand_process': False,\n        'descr': '{0}_grasps_{1}_possible'.format(N_GRASPS, len(prob.END_TARGETS)+prob.n_aux),\n        'her': False,\n        'prim_decay': 0.95,\n        'prim_first_wt': 1e1,\n    }\n\n    #config['prim_obs_include'].append(utils.EE_ENUM)\n    for o in range(no):\n        config['sensor_dims'][utils.OBJ_DELTA_ENUMS[o]] = 2\n        config['sensor_dims'][utils.OBJ_ENUMS[o]] = 2\n        config['sensor_dims'][utils.TARG_ENUMS[o]] = 2\n        config['sensor_dims'][utils.TARG_DELTA_ENUMS[o]] = 2\n        config['prim_obs_include'].append(utils.OBJ_DELTA_ENUMS[o])\n        #config['prim_obs_include'].append(utils.OBJ_ENUMS[o])\n        #config['prim_obs_include'].append(utils.TARG_ENUMS[o])\n        config['prim_obs_include'].append(utils.TARG_DELTA_ENUMS[o])\n    return config\n\nconfig = refresh_config()\n
===================================================================
diff --git a/opentamp/policy_hooks/namo/hyperparams_v94.py b/opentamp/policy_hooks/namo/hyperparams_v94.py
--- a/opentamp/policy_hooks/namo/hyperparams_v94.py	
+++ b/opentamp/policy_hooks/namo/hyperparams_v94.py	
@@ -9,7 +9,7 @@
 
 import opentamp.policy_hooks.utils.policy_solver_utils as utils
 from opentamp.core.util_classes.namo_grip_predicates import ATTRMAP
-from opentamp.pma.namo_grip_solver import NAMOSolver
+from opentamp.pma.namo_grip_solver import NAMOSolverOSQP
 from opentamp.policy_hooks.namo.grip_agent import NAMOGripAgent
 import opentamp.policy_hooks.namo.sorting_prob_11 as prob
 from opentamp.policy_hooks.utils.file_utils import LOG_DIR
@@ -42,7 +42,7 @@
     prob.N_GRASPS = N_GRASPS
     prob.FIX_TARGETS = True
 
-    prob.domain_file = "../domains/namo_domain/namo_current_holgrip.domain"
+    prob.domain_file = "domains/namo_domain/namo_current_holgrip.domain"
     prob.END_TARGETS = prob.END_TARGETS[:8]
     prob.n_aux = 0
     config = {
@@ -60,8 +60,8 @@
         'num_targs': nt,
         'attr_map': ATTRMAP,
         'agent_type': NAMOGripAgent,
-        'mp_solver_type': NAMOSolver,
-        'll_solver_type': NAMOSolver,
+        'mp_solver_type': NAMOSolverOSQP,
+        'll_solver_type': NAMOSolverOSQP,
         'n_dirs': N_DIRS,
 
         'state_include': [utils.STATE_ENUM],
